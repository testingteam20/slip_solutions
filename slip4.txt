Q.1 
Write a Java Program to implement Factory method for Pizza Store with createPizza(),
orederPizza(), prepare(), Bake(), cut(), box(). Use this to create variety of pizzaâ€™s
like NyStyleCheesePizza, ChicagoStyleCheesePizza etc.

import java.util.*;

interface Pizza {
   

    public String getName();

    public void prepare();

    public void bake();

    public void cut(); 
    public void box(); 

    public String toString(); 
}

class NyStyleCheesePizza implements Pizza {
	String name;
    	String dough;
    	String sauce;
    	ArrayList toppings = new ArrayList();
    public NyStyleCheesePizza() {
        name = "NyStyleCheesePizza";
        dough = "Regular Crust";
        sauce = "Marinara Pizza Sauce";
        toppings.add("Fresh Mozzarella");
        toppings.add("Parmesan");
    }
	
	public String getName() {
        return name;
    }

	public void prepare() {
        System.out.println("Preparing " + name);
        System.out.println("Tossing dough...");
        System.out.println("Adding Sauce....");
        System.out.println("Adding toppings....");
    }

    public void bake() {
        System.out.println("Baking " + name);
    }

    public void cut() {
        System.out.println("Cutting " + name + " into diagonal pieces");
    }

    public void box() {
        System.out.println("Boxing " + name);
    }

    public String toString() {
        StringBuffer display = new StringBuffer();
        display.append("---- " + name + " ----\n");
        display.append(dough + "\n");
        display.append(sauce + "\n");
        for (int i = 0; i < toppings.size(); i++) {
            display.append((String) toppings.get(i) + "\n");
        }
        return display.toString();
    }
}
class ChicagoStyleCheesePizza implements Pizza {
	String name;
    	String dough;
    	String sauce;
    	ArrayList toppings = new ArrayList();
    public ChicagoStyleCheesePizza() {
        name = "ChicagoStyleCheesePizza";
        dough = "Thin crust";
        sauce = "White garlic sauce";
        toppings.add("Clams");
        toppings.add("Grated parmesan cheese");
    }

	public String getName() {
        return name;
    }

	public void prepare() {
        System.out.println("Preparing " + name);
        System.out.println("Tossing dough...");
        System.out.println("Adding Sauce....");
        System.out.println("Adding toppings....");
    }

    public void bake() {
        System.out.println("Baking " + name);
    }

    public void cut() {
        System.out.println("Cutting " + name + " into square size");
    }

    public void box() {
        System.out.println("Boxing " + name);
    }

    public String toString() {
        StringBuffer display = new StringBuffer();
        display.append("---- " + name + " ----\n");
        display.append(dough + "\n");
        display.append(sauce + "\n");
        for (int i = 0; i < toppings.size(); i++) {
            display.append((String) toppings.get(i) + "\n");
        }
        return display.toString();
    }
}

class VeggiePizza implements Pizza {
	String name;
    	String dough;
    	String sauce;
    	ArrayList toppings = new ArrayList();
    public VeggiePizza() {
        name = "Veggie Pizza";
        dough = "Crust";
        sauce = "Marinara sauce";
        toppings.add("Shredded mozzarella");
        toppings.add("Grated parmesan");
        toppings.add("Diced onion");
        toppings.add("Sliced mushrooms");
        toppings.add("Sliced red pepper");
        toppings.add("Sliced black olives");
    }

	public String getName() {
        return name;
    }

	public void prepare() {
        System.out.println("Preparing " + name);
    }

    public void bake() {
        System.out.println("Baking " + name);
    }

    public void cut() {
        System.out.println("Cutting " + name);
    }

    public void box() {
        System.out.println("Boxing " + name);
    }

    public String toString() {
        StringBuffer display = new StringBuffer();
        display.append("---- " + name + " ----\n");
        display.append(dough + "\n");
        display.append(sauce + "\n");
        for (int i = 0; i < toppings.size(); i++) {
            display.append((String) toppings.get(i) + "\n");
        }
        return display.toString();
    }
}

class PepperoniPizza implements Pizza {
	String name;
    	String dough;
    	String sauce;
    	ArrayList toppings = new ArrayList();
    public PepperoniPizza() {
        name = "Pepperoni Pizza";
        dough = "Crust";
        sauce = "Marinara sauce";
        toppings.add("Sliced Pepperoni");
        toppings.add("Sliced Onion");
        toppings.add("Grated parmesan cheese");
    }

	public String getName() {
        return name;
    }

	public void prepare() {
        System.out.println("Preparing " + name);
    }

    public void bake() {
        System.out.println("Baking " + name);
    }

    public void cut() {
        System.out.println("Cutting " + name);
    }

    public void box() {
        System.out.println("Boxing " + name);
    }

    public String toString() {
        StringBuffer display = new StringBuffer();
        display.append("---- " + name + " ----\n");
        display.append(dough + "\n");
        display.append(sauce + "\n");
        for (int i = 0; i < toppings.size(); i++) {
            display.append((String) toppings.get(i) + "\n");
        }
        return display.toString();
    }
}

class SimplePizzaFactory {

    public Pizza createPizza(String type) {
        Pizza pizza = null;

        if (type.equals("nystylecheese")) {
            pizza = new NyStyleCheesePizza();
        } else if (type.equals("pepperoni")) {
            pizza = new PepperoniPizza();
        } else if (type.equals("chicagostylecheese")) {
            pizza = new ChicagoStyleCheesePizza();
        } else if (type.equals("veggie")) {
            pizza = new VeggiePizza();
        } 
        return pizza;
    }
}




class PizzaStore {
    SimplePizzaFactory factory;

    public PizzaStore(SimplePizzaFactory factory) {
        this.factory = factory;
    }

    public Pizza orderPizza(String type) {
        Pizza pizza;

        pizza = factory.createPizza(type);

        pizza.prepare();
        pizza.bake();
        pizza.cut();
        pizza.box();


        return pizza;
    }
}


class Ass1Q1{

    public static void main(String[] args) {
        SimplePizzaFactory factory = new SimplePizzaFactory();
        PizzaStore store = new PizzaStore(factory);
        
 	Scanner sobj = new Scanner(System.in);

        while(true)
	{
         	
		System.out.println("Enter the pizza name");
        	String pizzaName = (sobj.nextLine());
                pizzaName = pizzaName.toLowerCase();
		if(pizzaName.equals("exit"))
		{
		   System.out.println("Happy Customer Thank You For Visiting..!!!");
                   break;
		}
                try
		{
                	Pizza pizza = store.orderPizza(pizzaName);
			System.out.println("We ordered a " + pizza.getName() + "\n");
		}
                catch(Exception obj)
 		{
 			System.out.println("Pizza Not availabel");
		}
                
	
        	

          
	}
   

    }
}
-----------------------------------------------------------------------
Q. 2 Write a python program to Implement Simple Linear Regression for predicting house
price

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

#importing the dataset
dataset = pd.read_csv('/home/symsc9/Desktop/ML/Assignment 2/house_prediction_data.csv')

# data preprocessing
X = dataset.iloc[:,5:6].values  #independent 
y = dataset.iloc[:,2].values  #dependent

#splitting the dataset
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=1/3,random_state=0)

# fitting the regression model
from sklearn.linear_model import LinearRegression
regressor=LinearRegression()
regressor.fit(X_train,y_train)

# predicting the test set results
y_pred = regressor.predict(X_test) 
y_pred
 
y_test

# Visualising the Simple Linear Regression results 
plt.scatter(X_train, y_train, color='red') 
plt.plot(X_train, regressor.predict(X_train), color='blue') 
plt.title("House Price predication(Simple linear Regression)")
  
plt.xlabel("sqft_living")
plt.ylabel("price")
plt.show()
-----------------------------------------------------------------------------
Q. 3 Create a Node.js file that will convert the output "Hello World!" into upper-case
letters. 
**npm install upper-case**


var http = require('http');
var uc = require('upper-case');
http.createServer(function (req, res) {
  res.writeHead(200, {'Content-Type': 'text/html'});
  res.write(uc.upperCase("Hello World!"));
  res.end();
}).listen(8080);
